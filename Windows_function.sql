-- 1. **Rank the customers based on the total amount they've spent on rentals.**
select customer_id, sum(amount)  as total_amount , rank() over(order by sum(amount) desc) as customer_rank 
from payment group by customer_id;

-- 2. **Calculate the cumulative revenue generated by each film over time.
select film.film_id, title, rental_date, amount, sum(amount)
over(partition by film_id order by rental_date) as cumulative_revenue
from payment join rental on payment.rental_id = rental.rental_id
join inventory on rental.inventory_id = inventory.inventory_id
join film on inventory.film_id = film.film_id;

-- 3. 3. **Determine the average rental duration for each film, considering films with similar lengths.**
select film_id, avg(rental_duration) over (partition by length), length from film group by film_id;

-- 4. **Identify the top 3 films in each category based on their rental counts.**
with ranked_film as
( select f.film_id, f.title, c.name, count(r.rental_id) as rental_count, 
row_number() over(partition by c.name order by count(r.rental_id) desc) as rank_category
from film f join inventory i on f.film_id = i.film_id
join rental r on i.inventory_id = r.inventory_id 
join film_category fc on f.film_id = fc.film_id
join category c on fc.category_id = c.category_id 
group by f.film_id, c.name)

select film_id , title, rental_count, name from ranked_film where rank_category <= 3;


-- 5. Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.
with total_rental as
( select customer_id, sum(amount) as rental from payment group by customer_id ),
avg_rental as
( select avg(amount) as average from payment)
select tr.customer_id, tr.rental - ar.average from 
total_rental tr  join avg_rental ar on 1=1;


-- 6. Find the monthly revenue trend for the entire rental store over time.
with revenue_trend as
( select monthname(payment_date) as month , sum(amount) as amount from payment group by monthname(payment_date))
select rt.month , rt.amount, sum(amount) over() from revenue_trend rt;

-- 8. **Calculate the running total of rentals per category, ordered by rental count.**

with rental_count as
(select c.name as category , count(*) as rental_counts from payment p
inner join rental r on p.rental_id = r.rental_id
inner join inventory i on r.inventory_id = i.inventory_id
inner join film_category fc on i.film_id = fc.film_id
inner join category c on fc.category_id = c.category_id
group by c.name)
select category, rental_counts , sum(rental_counts) over (order by rental_counts) as running_total
from rental_count order by rental_counts desc;

-- 9. **Find the films that have been rented less than the average rental count for their respective categories.**
WITH avg_rental_count AS (
    SELECT c.name, AVG(COUNT(r.rental_id)) OVER (PARTITION BY c.name) AS average_rental_count
    FROM rental r
    INNER JOIN inventory i ON r.inventory_id = i.inventory_id
    INNER JOIN film_category fc ON i.film_id = fc.film_id
    INNER JOIN category c ON fc.category_id = c.category_id
    GROUP BY c.name
),
films AS (
    SELECT f.film_id,
           f.title,
           COUNT(r.rental_id) AS counts,
           c.name AS category_name
    FROM film f
    INNER JOIN inventory i ON f.film_id = i.film_id
    INNER JOIN rental r ON i.inventory_id = r.inventory_id
    INNER JOIN film_category fc ON f.film_id = fc.film_id
    INNER JOIN category c ON fc.category_id = c.category_id
    GROUP BY f.film_id, c.name
)
SELECT title, category_name, counts, average_rental_count
FROM films
INNER JOIN avg_rental_count ON films.category_name = avg_rental_count.name
WHERE counts < average_rental_count;

-- 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**
SELECT MONTHNAME(payment_date) AS months, SUM(amount) AS total_amount
FROM payment GROUP BY months;
